//
// Generated file, do not edit! Created by nedtool 5.5 from core4inet/linklayer/ethernet/base/EtherFrameWithQTag.msg.
//

#ifndef __CORE4INET_ETHERFRAMEWITHQTAG_M_H
#define __CORE4INET_ETHERFRAMEWITHQTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
//INET Auto-generated Messages
#include "inet/linklayer/ethernet/EtherFrame_m.h"

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Winconsistent-missing-override"
#elif defined(__GNUC__) && __GNUC__ >= 5
#  pragma GCC diagnostic ignored "-Wsuggest-override"
#endif
// }}


namespace CoRE4INET {

/**
 * Class generated from <tt>core4inet/linklayer/ethernet/base/EtherFrameWithQTag.msg:43</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet II headers contain a 16-bit ~EtherType to identify
 * // the encapsulated protocol and 802.1Q Tag
 * //
 * // Header length: src(6)+dest(6)+etherType(2)+802.1QTag(4) = 18 byte
 * // Total overhead: 18 byte Header + 4 byte CRC = 22 byte
 * //
 * // \@see ~EthernetIIFrame
 * //
 * // \@author Philipp Meyer
 * //
 * packet EthernetIIFrameWithQTag extends EthernetIIFrame
 * {
 *     // Overhead without payload
 *     byteLength = 22;
 *     // Set ethertype for Q frame
 *     etherType = 0x8100;
 * 
 *     // Priority Code Point (PCP): a 3-bit field which refers to the IEEE 802.1p priority. 
 *     // It indicates the frame priority level.
 *     // Values are from 0 (best effort) to 7 (highest); 1 represents the lowest priority.
 *     uint8_t pcp;
 *     // Drop Eligible (DE): a 1-bit field. May be used separately 
 *     // or in conjunction with PCP to indicate frames eligible to be dropped in the presence of congestion.   
 *     bool de;
 *     // VLAN Identifier (VID): a 12-bit field specifying the VLAN to which the frame belongs.
 *     // The hexadecimal values of 0x000 and 0xFFF are reserved. 
 *     // All other values may be used as VLAN identifiers, allowing up to 4,094 VLANs.
 *     // The reserved value 0x000 indicates that the frame does not belong to any VLAN; in this case,
 *     // the 802.1Q tag specifies only a priority and is referred to as a priority tag. On bridges,
 *     // VLAN 1 (the default VLAN ID) is often reserved for a management VLAN; this is vendor-specific.     
 *     uint16_t VID = 0;
 * 
 *     string displayString = "b=10,10,oval,blue";
 * }
 * </pre>
 */
class EthernetIIFrameWithQTag : public ::inet::EthernetIIFrame
{
  protected:
    uint8_t pcp;
    bool de;
    uint16_t VID;
    ::omnetpp::opp_string displayString;

    unsigned long streamID;
    uint16_t matchVersion;

  private:
    void copy(const EthernetIIFrameWithQTag& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetIIFrameWithQTag&);

  public:
    EthernetIIFrameWithQTag(const char *name=nullptr, short kind=0);
    EthernetIIFrameWithQTag(const EthernetIIFrameWithQTag& other);
    virtual ~EthernetIIFrameWithQTag();
    EthernetIIFrameWithQTag& operator=(const EthernetIIFrameWithQTag& other);
    virtual EthernetIIFrameWithQTag *dup() const override {return new EthernetIIFrameWithQTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getPcp() const;
    virtual void setPcp(uint8_t pcp);
    virtual bool getDe() const;
    virtual void setDe(bool de);
    virtual uint16_t getVID() const;
    virtual void setVID(uint16_t VID);
    virtual const char * getDisplayString() const;
    virtual void setDisplayString(const char * displayString);

    virtual unsigned long getStreamID() const;
    virtual void setStreamID(unsigned long streamID);
    virtual uint16_t getmatchVersion() const;
    virtual void setmatchVersion(uint16_t matchVersion);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetIIFrameWithQTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetIIFrameWithQTag& obj) {obj.parsimUnpack(b);}

} // namespace CoRE4INET

#endif // ifndef __CORE4INET_ETHERFRAMEWITHQTAG_M_H

