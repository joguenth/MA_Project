//
// Generated file, do not edit! Created by nedtool 5.5 from core4inet/linklayer/ethernet/AS6802/CTFrame.msg.
//

#ifndef __CORE4INET_CTFRAME_M_H
#define __CORE4INET_CTFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    //INET
#include "inet/linklayer/ethernet/EtherFrame_m.h"
    
#if defined(__clang__)
#  pragma clang diagnostic ignored "-Winconsistent-missing-override"
#elif defined(__GNUC__) && __GNUC__ >= 5
#  pragma GCC diagnostic ignored "-Wsuggest-override"
#endif
// }}


namespace CoRE4INET {

/**
 * Class generated from <tt>core4inet/linklayer/ethernet/AS6802/CTFrame.msg:41</tt> by nedtool.
 * <pre>
 * //
 * // Represents a critical traffic frame
 * //
 * // CTFrames are displayed as small black rectangles in the GUI
 * //
 * // \@see ~EthernetIIFrame, ~EtherFrame
 * //
 * // \@author Till Steinbach
 * //
 * packet CTFrame extends EthernetIIFrame
 * {
 *     \@customize(true);
 * 
 *     // Set EthernetHeader Bytelength
 *     byteLength = 18;
 *     etherType = 0x891d;
 * 
 *     // Critical traffic ID (from MAC) (for TT and RC messages). 
 *     abstract uint16_t ctID;
 *     // Critical traffic marker (from MAC) (for TT and RC messages). 
 *     abstract uint32_t ctMarker;
 * 
 *     string displayString = "b=15,15,rect,black,kind,5";
 * }
 * </pre>
 *
 * CTFrame_Base is only useful if it gets subclassed, and CTFrame is derived from it.
 * The minimum code to be written for CTFrame is the following:
 *
 * <pre>
 * class CTFrame : public CTFrame_Base
 * {
 *   private:
 *     void copy(const CTFrame& other) { ... }

 *   public:
 *     CTFrame(const char *name=nullptr, short kind=0) : CTFrame_Base(name,kind) {}
 *     CTFrame(const CTFrame& other) : CTFrame_Base(other) {copy(other);}
 *     CTFrame& operator=(const CTFrame& other) {if (this==&other) return *this; CTFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual CTFrame *dup() const override {return new CTFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CTFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CTFrame)
 * </pre>
 */
class CTFrame_Base : public ::inet::EthernetIIFrame
{
  protected:
    ::omnetpp::opp_string displayString;

  private:
    void copy(const CTFrame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CTFrame_Base&);
    // make constructors protected to avoid instantiation
    CTFrame_Base(const char *name=nullptr, short kind=0);
    CTFrame_Base(const CTFrame_Base& other);
    // make assignment operator protected to force the user override it
    CTFrame_Base& operator=(const CTFrame_Base& other);

  public:
    virtual ~CTFrame_Base();
    virtual CTFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class CTFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getCtID() const = 0;
    virtual void setCtID(uint16_t ctID) = 0;
    virtual uint32_t getCtMarker() const = 0;
    virtual void setCtMarker(uint32_t ctMarker) = 0;
    virtual const char * getDisplayString() const;
    virtual void setDisplayString(const char * displayString);
};

} // namespace CoRE4INET

#endif // ifndef __CORE4INET_CTFRAME_M_H

