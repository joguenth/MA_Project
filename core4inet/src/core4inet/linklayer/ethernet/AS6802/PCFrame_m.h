//
// Generated file, do not edit! Created by nedtool 5.5 from core4inet/linklayer/ethernet/AS6802/PCFrame.msg.
//

#ifndef __CORE4INET_PCFRAME_M_H
#define __CORE4INET_PCFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    //Auto-generated Messages
	#include "core4inet/linklayer/ethernet/AS6802/RCFrame_m.h"
// }}


namespace CoRE4INET {

/**
 * Enum generated from <tt>core4inet/linklayer/ethernet/AS6802/PCFrame.msg:35</tt> by nedtool.
 * <pre>
 * //
 * // Identifier for different types of Protocol Control Frame (PCF)
 * //
 * // \@see ~PCFrame
 * //
 * // \@author Till Steinbach
 * //
 * enum PCFType
 * {
 *     //Coldstart Frame (CS)
 *     CS_FRAME = 1;
 *     //Integrate Frame (IN)
 *     IN_FRAME = 2;
 *     //Coldstart Acknowledge (CA)
 *     CA_FRAME = 3;
 * }
 * </pre>
 */
enum PCFType {
    CS_FRAME = 1,
    IN_FRAME = 2,
    CA_FRAME = 3
};

/**
 * Class generated from <tt>core4inet/linklayer/ethernet/AS6802/PCFrame.msg:52</tt> by nedtool.
 * <pre>
 * //
 * // Represents a Protocol Control Frame (PCF)
 * //
 * // \@see ~RCFrame
 * //
 * // \@author Till Steinbach
 * //
 * packet PCFrame extends RCFrame
 * {
 *     // Set PCF Bytelength
 *     byteLength = 64;
 * 
 *     // pcf_integration_cycle: Represents the integration cycle in which the protocol control frame was sent
 *     //
 *     // 32 Bit field
 *     uint32_t integration_cycle;
 *     // pcf_membership_new: Bit vector with a static configured one-to-one relationship from a bit to a Synchronization Master
 *     //
 *     // 32 Bit field
 *     uint32_t membership_new;
 *     // pcf_sync_priority: Static configured value in each Synchronization Master, Synchronization Client, and Compression Master
 *     //
 *     // 8 Bit field
 *     uint8_t sync_priority;
 *     // pcf_sync_domain: Static configured value in each Synchronization Master, Synchronization Client, and Compression Master
 *     //
 *     // 8 Bit field
 *     uint8_t sync_domain;
 *     // pcf_type: Defines the frame type of a Protocol Control Frame
 *     //
 *     // 4 Bit field
 *     uint8_t type \@enum(PCFType);
 *     // pcf_transparent_clock: stores the accumulated delay of a Protocol Control Frame up to the consumer.
 *     //
 *     // Time is represented as multiples of picoseconds
 *     //
 *     // 64 Bit field
 *     uint64_t transparent_clock;
 * 
 *     string displayString = "b=15,15,rect,white,orange,5";
 * }
 * </pre>
 */
class PCFrame : public ::CoRE4INET::RCFrame
{
  protected:
    uint32_t integration_cycle;
    uint32_t membership_new;
    uint8_t sync_priority;
    uint8_t sync_domain;
    uint8_t type;
    uint64_t transparent_clock;
    ::omnetpp::opp_string displayString;

  private:
    void copy(const PCFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PCFrame&);

  public:
    PCFrame(const char *name=nullptr, short kind=0);
    PCFrame(const PCFrame& other);
    virtual ~PCFrame();
    PCFrame& operator=(const PCFrame& other);
    virtual PCFrame *dup() const override {return new PCFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getIntegration_cycle() const;
    virtual void setIntegration_cycle(uint32_t integration_cycle);
    virtual uint32_t getMembership_new() const;
    virtual void setMembership_new(uint32_t membership_new);
    virtual uint8_t getSync_priority() const;
    virtual void setSync_priority(uint8_t sync_priority);
    virtual uint8_t getSync_domain() const;
    virtual void setSync_domain(uint8_t sync_domain);
    virtual uint8_t getType() const;
    virtual void setType(uint8_t type);
    virtual uint64_t getTransparent_clock() const;
    virtual void setTransparent_clock(uint64_t transparent_clock);
    virtual const char * getDisplayString() const;
    virtual void setDisplayString(const char * displayString);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PCFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PCFrame& obj) {obj.parsimUnpack(b);}

} // namespace CoRE4INET

#endif // ifndef __CORE4INET_PCFRAME_M_H

