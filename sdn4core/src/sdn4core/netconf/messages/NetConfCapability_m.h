//
// Generated file, do not edit! Created by nedtool 5.5 from sdn4core/netconf/messages/NetConfCapability.msg.
//

#ifndef __SDN4CORE_NETCONFCAPABILITY_M_H
#define __SDN4CORE_NETCONFCAPABILITY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace SDN4CoRE {

/**
 * Class generated from <tt>sdn4core/netconf/messages/NetConfCapability.msg:44</tt> by nedtool.
 * <pre>
 * //
 * // Capabilities Exchange
 * //
 * // Capabilities are advertised in messages sent by each peer during
 * // session establishment.  When the NETCONF session is opened, each peer
 * // (both client and server) MUST send a <hello> element containing a
 * // list of that peer's capabilities.
 * //
 * // A server sending the <hello> element MUST include a <session-id>
 * // element containing the session ID for this NETCONF session.  A client
 * // sending the <hello> element MUST NOT include a <session-id> element.
 * //
 * // A server receiving a <hello> message with a <session-id> element MUST
 * // terminate the NETCONF session.  Similarly, a client that does not
 * // receive a <session-id> element in the server's <hello> message MUST
 * // terminate the NETCONF session (without first sending a
 * // <close-session>).
 * //
 * // \@author Timo Haeckel, for HAW Hamburg
 * //
 * packet NetConfHello
 * {
 *     int session_id;
 *     byteLength = 40;//<hello><session-id>1</session-id></hello>
 * }
 * </pre>
 */
class NetConfHello : public ::omnetpp::cPacket
{
  protected:
    int session_id;

  private:
    void copy(const NetConfHello& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetConfHello&);

  public:
    NetConfHello(const char *name=nullptr, short kind=0);
    NetConfHello(const NetConfHello& other);
    virtual ~NetConfHello();
    NetConfHello& operator=(const NetConfHello& other);
    virtual NetConfHello *dup() const override {return new NetConfHello(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSession_id() const;
    virtual void setSession_id(int session_id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetConfHello& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetConfHello& obj) {obj.parsimUnpack(b);}

} // namespace SDN4CoRE

#endif // ifndef __SDN4CORE_NETCONFCAPABILITY_M_H

