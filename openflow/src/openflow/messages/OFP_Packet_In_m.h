//
// Generated file, do not edit! Created by nedtool 5.5 from openflow/messages/OFP_Packet_In.msg.
//

#ifndef __OPENFLOW_OFP_PACKET_IN_M_H
#define __OPENFLOW_OFP_PACKET_IN_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "openflow/openflow/protocol/OpenFlow.h"
    #include "openflow/messages/Open_Flow_Message_m.h"
    #include "inet/linklayer/ethernet/EtherFrame_m.h"
    
    namespace openflow{
    inline std::ostream& operator<<(std::ostream& os, oxm_basic_match match)
    {
    	os << "OFB_ETH_TYPE: " << std::hex << match.OFB_ETH_TYPE << ", OFB_ETH_SRC: " << match.OFB_ETH_SRC;
    	os << ", OFB_ETH_DST: " << match.OFB_ETH_DST << ", OFB_IN_PORT: " << match.OFB_IN_PORT << endl; 
		os << ", OFB_ARP_OP: " << match.OFB_ARP_OP << ", OFB_ARP_SHA: " << match.OFB_ARP_SHA;
		os << ", OFB_ARP_THA: " << match.OFB_ARP_THA << ", OFB_ARP_SPA: " << match.OFB_ARP_SPA;
		os << ", OFB_ARP_TPA: " << match.OFB_ARP_TPA << endl;
		return os;
	}
	} /*end namespace openflow*/
// }}


namespace openflow {

/**
 * Class generated from <tt>openflow/messages/OFP_Packet_In.msg:33</tt> by nedtool.
 * <pre>
 * // When packets are received by the data plane and sent to the connected controller,
 * // the OFP_PACKET_IN messages are used. If the complete packet needs to be sent to the controller, because it can not be
 * // stored in the bufer, it is encapsulated in the packet-in message.
 * packet OFP_Packet_In extends Open_Flow_Message
 * {
 *     uint32_t buffer_id;     // ID assigned by datapath. 
 *     uint16_t total_len;     // Full length of frame. 
 *     uint8_t reason;         // Reason packet is being sent (one of OFPR_*) 
 *     //    EthernetIIFrame frame;
 *     oxm_basic_match match;
 * //   	oxm_tlv tlv[];
 * //    uint8_t data[0];        // Ethernet frame, halfway through 32-bit word,
 *                             // so the IP header is 32-bit aligned.  The
 *                             // amount of data is inferred from the length
 *                             // field in the header.  Because of padding,
 *                             // offsetof(struct ofp_packet_in, data) ==
 *                             // sizeof(struct ofp_packet_in) - 2. 
 * 
 * }
 * </pre>
 */
class OFP_Packet_In : public ::openflow::Open_Flow_Message
{
  protected:
    uint32_t buffer_id;
    uint16_t total_len;
    uint8_t reason;
    oxm_basic_match match;

  private:
    void copy(const OFP_Packet_In& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Packet_In&);

  public:
    OFP_Packet_In(const char *name=nullptr, short kind=0);
    OFP_Packet_In(const OFP_Packet_In& other);
    virtual ~OFP_Packet_In();
    OFP_Packet_In& operator=(const OFP_Packet_In& other);
    virtual OFP_Packet_In *dup() const override {return new OFP_Packet_In(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint16_t getTotal_len() const;
    virtual void setTotal_len(uint16_t total_len);
    virtual uint8_t getReason() const;
    virtual void setReason(uint8_t reason);
    virtual oxm_basic_match& getMatch();
    virtual const oxm_basic_match& getMatch() const {return const_cast<OFP_Packet_In*>(this)->getMatch();}
    virtual void setMatch(const oxm_basic_match& match);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OFP_Packet_In& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OFP_Packet_In& obj) {obj.parsimUnpack(b);}

} // namespace openflow

#endif // ifndef __OPENFLOW_OFP_PACKET_IN_M_H

