//
// Generated file, do not edit! Created by nedtool 5.5 from openflow/messages/OFP_Packet_Out.msg.
//

#ifndef __OPENFLOW_OFP_PACKET_OUT_M_H
#define __OPENFLOW_OFP_PACKET_OUT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "openflow/openflow/protocol/OpenFlow.h"
    #include "openflow/messages/Open_Flow_Message_m.h"
    #include "inet/linklayer/ethernet/EtherFrame_m.h"
    
    namespace openflow{
    inline std::ostream& operator<<(std::ostream& os, ofp_action_output action)
    {
		os << "Port (hex): " << std::hex << action.port << endl;
		return os;
	}
	} /*end namespace openflow*/
// }}


namespace openflow {

/**
 * Class generated from <tt>openflow/messages/OFP_Packet_Out.msg:27</tt> by nedtool.
 * <pre>
 * //When the controller decides to send a packet out through the data plane, it uses the
 * //OFP PACKET OUT message.
 * packet OFP_Packet_Out extends Open_Flow_Message
 * {
 *     uint32_t buffer_id; // ID assigned by datapath (OFP_NO_BUFFER
 *                         //if none). 
 *     uint32_t in_port; // Packetï¿½s input port or OFPP_CONTROLLER. 
 * 
 *     ofp_action_output actions[]; // Action list. 
 *     //	 EthernetIIFrame frame;
 *     uint8_t data[0];   // Packet data. The length is inferred
 * 							//from the length field in the header.
 * 							//(Only meaningful if buffer_id == -1.) 
 * }
 * </pre>
 */
class OFP_Packet_Out : public ::openflow::Open_Flow_Message
{
  protected:
    uint32_t buffer_id;
    uint32_t in_port;
    ofp_action_output *actions; // array ptr
    unsigned int actions_arraysize;
    uint8_t data[0];

  private:
    void copy(const OFP_Packet_Out& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Packet_Out&);

  public:
    OFP_Packet_Out(const char *name=nullptr, short kind=0);
    OFP_Packet_Out(const OFP_Packet_Out& other);
    virtual ~OFP_Packet_Out();
    OFP_Packet_Out& operator=(const OFP_Packet_Out& other);
    virtual OFP_Packet_Out *dup() const override {return new OFP_Packet_Out(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint32_t getIn_port() const;
    virtual void setIn_port(uint32_t in_port);
    virtual void setActionsArraySize(unsigned int size);
    virtual unsigned int getActionsArraySize() const;
    virtual ofp_action_output& getActions(unsigned int k);
    virtual const ofp_action_output& getActions(unsigned int k) const {return const_cast<OFP_Packet_Out*>(this)->getActions(k);}
    virtual void setActions(unsigned int k, const ofp_action_output& actions);
    virtual unsigned int getDataArraySize() const;
    virtual uint8_t getData(unsigned int k) const;
    virtual void setData(unsigned int k, uint8_t data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OFP_Packet_Out& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OFP_Packet_Out& obj) {obj.parsimUnpack(b);}

} // namespace openflow

#endif // ifndef __OPENFLOW_OFP_PACKET_OUT_M_H

