//
// Generated file, do not edit! Created by nedtool 5.5 from openflow/messages/OFP_Features_Reply.msg.
//

#ifndef __OPENFLOW_OFP_FEATURES_REPLY_M_H
#define __OPENFLOW_OFP_FEATURES_REPLY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "openflow/openflow/protocol/OpenFlow.h"
    #include "openflow/messages/Open_Flow_Message_m.h"
    #include "inet/linklayer/common/MACAddress.h"
// }}


namespace openflow {

/**
 * Class generated from <tt>openflow/messages/OFP_Features_Reply.msg:17</tt> by nedtool.
 * <pre>
 * // response  to an OFP_Features_Request message
 * packet OFP_Features_Reply extends Open_Flow_Message
 * {
 *     string datapath_id;		// Datapath unique ID. The lower 48-bits are for a MAC address,
 *     					   	// while the upper 16-bits are implementer-defined.
 *     //	MACAddress address;
 *     uint32_t n_buffers;		// Max packets buffered at once.
 * 
 *     uint8_t n_tables; 		// Number of tables supported by datapath.
 * 
 *     //Features
 *     uint32_t capabilities; 	// Bitmap of support "ofp_capabilities".
 *     uint32_t reserved;
 * 
 *     //Port info
 *     uint32_t ports[]; 		//Port definitions. The number of ports is inferred from the
 *     						// length field in the header.
 * }
 * </pre>
 */
class OFP_Features_Reply : public ::openflow::Open_Flow_Message
{
  protected:
    ::omnetpp::opp_string datapath_id;
    uint32_t n_buffers;
    uint8_t n_tables;
    uint32_t capabilities;
    uint32_t reserved;
    uint32_t *ports; // array ptr
    unsigned int ports_arraysize;

  private:
    void copy(const OFP_Features_Reply& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Features_Reply&);

  public:
    OFP_Features_Reply(const char *name=nullptr, short kind=0);
    OFP_Features_Reply(const OFP_Features_Reply& other);
    virtual ~OFP_Features_Reply();
    OFP_Features_Reply& operator=(const OFP_Features_Reply& other);
    virtual OFP_Features_Reply *dup() const override {return new OFP_Features_Reply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getDatapath_id() const;
    virtual void setDatapath_id(const char * datapath_id);
    virtual uint32_t getN_buffers() const;
    virtual void setN_buffers(uint32_t n_buffers);
    virtual uint8_t getN_tables() const;
    virtual void setN_tables(uint8_t n_tables);
    virtual uint32_t getCapabilities() const;
    virtual void setCapabilities(uint32_t capabilities);
    virtual uint32_t getReserved() const;
    virtual void setReserved(uint32_t reserved);
    virtual void setPortsArraySize(unsigned int size);
    virtual unsigned int getPortsArraySize() const;
    virtual uint32_t getPorts(unsigned int k) const;
    virtual void setPorts(unsigned int k, uint32_t ports);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OFP_Features_Reply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OFP_Features_Reply& obj) {obj.parsimUnpack(b);}

} // namespace openflow

#endif // ifndef __OPENFLOW_OFP_FEATURES_REPLY_M_H

