//
// Generated file, do not edit! Created by nedtool 5.5 from openflow/messages/HF_SyncReply.msg.
//

#ifndef __OPENFLOW_HF_SYNCREPLY_M_H
#define __OPENFLOW_HF_SYNCREPLY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "inet/linklayer/ethernet/EtherFrame_m.h"
    #include "openflow/hyperflow/HyperFlowStructs.h"
    namespace openflow{
    typedef std::list<ControlChannelEntry> ControlChannel;
    typedef std::list<DataChannelEntry> DataChannel;
    } /*end namespace openflow*/
    
// }}


namespace openflow {

/**
 * Class generated from <tt>openflow/messages/HF_SyncReply.msg:20</tt> by nedtool.
 * <pre>
 * // When packets are received by the data plane and sent to the connected controller,
 * // the OFP_PACKET_IN messages are used. If the complete packet needs to be sent to the controller, because it can not be
 * // stored in the bufer, it is encapsulated in the packet-in message.
 * packet HF_SyncReply
 * {
 *     ControlChannel controlChannel;
 *     DataChannel dataChannel;
 * }
 * </pre>
 */
class HF_SyncReply : public ::omnetpp::cPacket
{
  protected:
    ControlChannel controlChannel;
    DataChannel dataChannel;

  private:
    void copy(const HF_SyncReply& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HF_SyncReply&);

  public:
    HF_SyncReply(const char *name=nullptr, short kind=0);
    HF_SyncReply(const HF_SyncReply& other);
    virtual ~HF_SyncReply();
    HF_SyncReply& operator=(const HF_SyncReply& other);
    virtual HF_SyncReply *dup() const override {return new HF_SyncReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ControlChannel& getControlChannel();
    virtual const ControlChannel& getControlChannel() const {return const_cast<HF_SyncReply*>(this)->getControlChannel();}
    virtual void setControlChannel(const ControlChannel& controlChannel);
    virtual DataChannel& getDataChannel();
    virtual const DataChannel& getDataChannel() const {return const_cast<HF_SyncReply*>(this)->getDataChannel();}
    virtual void setDataChannel(const DataChannel& dataChannel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HF_SyncReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HF_SyncReply& obj) {obj.parsimUnpack(b);}

} // namespace openflow

#endif // ifndef __OPENFLOW_HF_SYNCREPLY_M_H

